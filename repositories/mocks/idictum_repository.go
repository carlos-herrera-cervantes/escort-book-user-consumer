// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-user-consumer/repositories (interfaces: IDictumRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "escort-book-user-consumer/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDictumRepository is a mock of IDictumRepository interface.
type MockIDictumRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIDictumRepositoryMockRecorder
}

// MockIDictumRepositoryMockRecorder is the mock recorder for MockIDictumRepository.
type MockIDictumRepositoryMockRecorder struct {
	mock *MockIDictumRepository
}

// NewMockIDictumRepository creates a new mock instance.
func NewMockIDictumRepository(ctrl *gomock.Controller) *MockIDictumRepository {
	mock := &MockIDictumRepository{ctrl: ctrl}
	mock.recorder = &MockIDictumRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDictumRepository) EXPECT() *MockIDictumRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIDictumRepository) Create(arg0 context.Context, arg1 models.Dictum) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIDictumRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIDictumRepository)(nil).Create), arg0, arg1)
}
